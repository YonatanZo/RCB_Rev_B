// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 21.1 (Build Build 850 06/23/2022)
// Created on Thu Sep  1 22:26:50 2022

rcb_top rcb_top_inst
(
	.clk(clk_sig) ,	// input  clk_sig
	.rst_n(rst_n_sig) ,	// input  rst_n_sig
	.mclk(mclk_sig) ,	// input  mclk_sig
	.cs_n(cs_n_sig) ,	// input  cs_n_sig
	.mosi(mosi_sig) ,	// input  mosi_sig
	.miso(miso_sig) ,	// output  miso_sig
	.pow(pow_sig) ,	// input  pow_sig
	.right_plunger_nc(right_plunger_nc_sig) ,	// input  right_plunger_nc_sig
	.right_plunger_no(right_plunger_no_sig) ,	// input  right_plunger_no_sig
	.left_plunger_nc(left_plunger_nc_sig) ,	// input  left_plunger_nc_sig
	.left_plunger_no(left_plunger_no_sig) ,	// input  left_plunger_no_sig
	.right_tool_ex_nc(right_tool_ex_nc_sig) ,	// input  right_tool_ex_nc_sig
	.right_tool_ex_no(right_tool_ex_no_sig) ,	// input  right_tool_ex_no_sig
	.left_tool_ex_nc(left_tool_ex_nc_sig) ,	// input  left_tool_ex_nc_sig
	.left_tool_ex_no(left_tool_ex_no_sig) ,	// input  left_tool_ex_no_sig
	.right_drape_em(right_drape_em_sig) ,	// input  right_drape_em_sig
	.right_drape_sw(right_drape_sw_sig) ,	// input  right_drape_sw_sig
	.right_open_nc(right_open_nc_sig) ,	// input  right_open_nc_sig
	.right_open_no(right_open_no_sig) ,	// input  right_open_no_sig
	.right_close_nc(right_close_nc_sig) ,	// input  right_close_nc_sig
	.right_close_no(right_close_no_sig) ,	// input  right_close_no_sig
	.left_drape_em(left_drape_em_sig) ,	// input  left_drape_em_sig
	.left_drape_sw(left_drape_sw_sig) ,	// input  left_drape_sw_sig
	.left_open_nc(left_open_nc_sig) ,	// input  left_open_nc_sig
	.left_open_no(left_open_no_sig) ,	// input  left_open_no_sig
	.left_close_nc(left_close_nc_sig) ,	// input  left_close_nc_sig
	.left_close_no(left_close_no_sig) ,	// input  left_close_no_sig
	.right_drape_em_open(right_drape_em_open_sig) ,	// output  right_drape_em_open_sig
	.left_drape_em_open(left_drape_em_open_sig) ,	// output  left_drape_em_open_sig
	.whee4_nc(whee4_nc_sig) ,	// input  whee4_nc_sig
	.whee4_no(whee4_no_sig) ,	// input  whee4_no_sig
	.whee3_nc(whee3_nc_sig) ,	// input  whee3_nc_sig
	.whee3_no(whee3_no_sig) ,	// input  whee3_no_sig
	.whee2_nc(whee2_nc_sig) ,	// input  whee2_nc_sig
	.whee2_no(whee2_no_sig) ,	// input  whee2_no_sig
	.whee1_nc(whee1_nc_sig) ,	// input  whee1_nc_sig
	.whee1_no(whee1_no_sig) ,	// input  whee1_no_sig
	.right_tool_ex_led3(right_tool_ex_led3_sig) ,	// output  right_tool_ex_led3_sig
	.right_tool_ex_led2(right_tool_ex_led2_sig) ,	// output  right_tool_ex_led2_sig
	.right_tool_ex_led1(right_tool_ex_led1_sig) ,	// output  right_tool_ex_led1_sig
	.left_tool_ex_led3(left_tool_ex_led3_sig) ,	// output  left_tool_ex_led3_sig
	.left_tool_ex_led2(left_tool_ex_led2_sig) ,	// output  left_tool_ex_led2_sig
	.left_tool_ex_led1(left_tool_ex_led1_sig) ,	// output  left_tool_ex_led1_sig
	.right_plunger_led3(right_plunger_led3_sig) ,	// output  right_plunger_led3_sig
	.right_plunger_led2(right_plunger_led2_sig) ,	// output  right_plunger_led2_sig
	.right_plunger_led1(right_plunger_led1_sig) ,	// output  right_plunger_led1_sig
	.left_plunger_led3(left_plunger_led3_sig) ,	// output  left_plunger_led3_sig
	.left_plunger_led2(left_plunger_led2_sig) ,	// output  left_plunger_led2_sig
	.left_plunger_led1(left_plunger_led1_sig) ,	// output  left_plunger_led1_sig
	.estop_btn2(estop_btn2_sig) ,	// input  estop_btn2_sig
	.estop_btn1(estop_btn1_sig) ,	// input  estop_btn1_sig
	.estop_bypass_diag(estop_bypass_diag_sig) ,	// output  estop_bypass_diag_sig
	.estop_activation(estop_activation_sig) ,	// output  estop_activation_sig
	.estop_diagnostic(estop_diagnostic_sig) ,	// output [15:0] estop_diagnostic_sig
	.sync(sync_sig) 	// input  sync_sig
);

