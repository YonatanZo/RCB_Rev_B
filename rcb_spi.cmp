-- Copyright (C) 2023  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.


-- Generated by Quartus Prime Version 22.1 (Build Build 922 07/20/2023)
-- Created on Wed Feb 28 13:40:21 2024

COMPONENT rcb_spi
	GENERIC ( FPGA_MAJOR_VER : STD_LOGIC_VECTOR(7 DOWNTO 0) := b"00000011"; FPGA_REV : STD_LOGIC_VECTOR(7 DOWNTO 0) := b"00000001"; FPGA_REV_YEAR : STD_LOGIC_VECTOR(7 DOWNTO 0) := b"00010111"; FPGA_REV_MONTH : STD_LOGIC_VECTOR(7 DOWNTO 0) := b"00000011";
		 FPGA_REV_DAY : STD_LOGIC_VECTOR(7 DOWNTO 0) := b"00000111"; FPGA_REV_HOUR : STD_LOGIC_VECTOR(7 DOWNTO 0) := b"00001000"; SPI_COM_LEN : INTEGER := 8; SPI_ADDR_LEN : INTEGER;
		 SPI_DATA_LEN : INTEGER; WRITE_COM : STD_LOGIC_VECTOR(7 DOWNTO 0) := b"00001010"; READ_COM : STD_LOGIC_VECTOR(7 DOWNTO 0) := b"00001111"; WRITE_MODE : STD_LOGIC_VECTOR(1 DOWNTO 0) := b"00";
		 READ_MODE : STD_LOGIC_VECTOR(1 DOWNTO 0) := b"01"; UNDEF_MODE : STD_LOGIC_VECTOR(1 DOWNTO 0) := b"11"; ADDR_FPGA_VER : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000000000"; ADDR_FPGA_REV_DATA : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000000001";
		 ADDR_FPGA_POW_DIAG : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000000010"; ADDR_FPGA_BUTTONS : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000000011"; ADDR_FPGA_DRAPE_SW_STATE : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000000100"; ADDR_FPGA_DRAPE_EM_STATE : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000000101";
		 ADDR_FPGA_DRAPE_SW_APPROVAL : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000000110"; ADDR_FPGA_DRAPE_SENSOR : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000000111"; ADDR_FPGA_WHEEL_DRIVER_OUT : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000001000"; ADDR_FPGA_WHEEL_DRIVER_ELO : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000001001";
		 ADDR_FPGA_WHEEL_DRIVER_IN : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000001010"; ADDR_FPGA_WHEEL_DRIVER_ABRT : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000001011"; ADDR_FPGA_WHEEL_SENSOR : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000001100"; ADDR_FPGA_BUTTONS_LED : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000001101";
		 ADDR_FPGA_ESTOP_STATUS : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000001110"; ADDR_FPGA_ESTOP_ACTIVATION : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000001111"; ADDR_FPGA_ESTOP_DIAGNOSTIC : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000010000"; ADDR_FPGA_ESTOP_OPEN : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000010001";
		 ADDR_FPGA_DIAGNOSTIC_LEDS : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000010010"; ADDR_FPGA_SPARE_IO : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000010011"; ADDR_FPGA_SPARE_4MB : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000010100"; ADDR_FPGA_WHEEL_ROD : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000010101";
		 ADDR_FPGA_FAN1_TACHO : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000010110"; ADDR_FPGA_FAN1_PWM : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000010111"; ADDR_FPGA_FAN2_TACHO : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000011000"; ADDR_FPGA_FAN2_PWM : STD_LOGIC_VECTOR(15 DOWNTO 0) := b"0000000000011001";
		 NUM_REG : INTEGER := 26; ESTOP_DIAG_ACTIV : STD_LOGIC_VECTOR(31 DOWNTO 0) := b"00000000000000001010101111001101"; ESTOP_ACTIVATION_PULSE : INTEGER := 100000; FAN_TACHO_MES_PERIOD : STD_LOGIC_VECTOR(25 DOWNTO 0) := b"00000000110000110101000000";
		 DEB_DEEP : INTEGER := 3; IDLE : INTEGER := 0; CMD : INTEGER := 1; ADDR : INTEGER := 2;
		 MOSI_DATA : INTEGER := 3; MISO_DATA : INTEGER := 4 );
	PORT
	(
		clk_100m		:	 IN STD_LOGIC;
		rst_n_syn		:	 IN STD_LOGIC;
		sclk		:	 IN STD_LOGIC;
		cs_n		:	 IN STD_LOGIC;
		mosi		:	 IN STD_LOGIC;
		miso_t		:	 OUT STD_LOGIC;
		data_miso		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		data_mosi		:	 OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		data_mosi_rdy		:	 OUT STD_LOGIC;
		addr		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		addr_rdy		:	 OUT STD_LOGIC;
		data_miso_rdy		:	 OUT STD_LOGIC
	);
END COMPONENT;